/*
* description: Section for the help menu, which tells the user more about the app
* author: Sam Ford
* date: 6/13/23
*/
using MU = DecisionMaker.MenuUtils;
using TU = DecisionMaker.TextUtils;
namespace DecisionMaker
{
    public class HelpSection:IDecisionMakerSection
    {
        private enum HelpMenuTopics
        {
            Overview = 1,
            Navigation,
            GeneratedFiles
        }

        private string[] mainTopics = { "Overview", "Sections", "GeneratedFiles" };

        private const string HELP_SECTION_GREETING = "Welcome to the Help Menu. This is where you can learn more about the app if the README wasn't enough.";

        private const string OVERVIEW_INFO = @"
This application's purpose is to help you make a decision that you are struggling with.
If it's a recurring thing, e.g. deciding what takeout food to order,
a 'Decision Category' can be created in which you name the category, describe it, and give options for it.
Making a decision is nothing more than randomly choosing a saved choice. Acting on this random choice is up to the user.
All of this is stored as a text file that will be saved in a subdirectory so the app will remember the user's prior categories.
Fear not, for one can later modify these categories to their liking.... 
    
Profile customization is available in which a user can create a custom display name, bootup greeting message, and an exiting goodbye message...
    
File Management is focused on removing files generated by this application...

Help is focused on, well, helping you out as you can see...";

        private const string NAV_INFO = @"
For navigation, you may have noticed it is primarily choosing a valid itneger from a numbered list...

In numbered menus, 0 is ALWAYS to EXIT to the last menu. It is always listed below all positive options. No exceptions!
Occasionally, negative options will be listed after the exit option on a case-by-case basis...

Sometimes, you will be asked to type text, e.g. writing a custom display name in the Profile section.
These type text sections may involve confirmtion menus to confirm what you typed.
Other type text sections may involve typing case-sensitive keywords that signal you're done with what was prompted...";

        private const string GENERATED_FILES_INFO = @"
Files generated by this program primarily include 'Decision Category' text files that are used by the program to
remember previous user activity and to convey necessary information to the user while using the application.
There may be as many as 0 to arbitrarily many 'Decision Category' files.
They are stored in the \Decisions\Categories directory...

The other generated file category is Profile text files.
There can be as many as 0 to 3 of these. These include a display name, greeting, and goodbye. 
These are stored in the \ProfileStorage directory...
    
The final generated file is the 'wipcat' text file.
This file saves any progress while writing any aforementioned Decision Category file.
The file will save any progress for use in a future session
and will allow the user to resume where they were before an error occurred.
After a user decides if they want to continue with it or not, the wipcat file will be cleared...

Please remember:
NO FILES GENERATED BY THIS PROGRAM SHOULD BE DELETED WHILE THE PROGRAM RUNS....";

        public int doMenuLoop()
        {
            int opt = MU.INVALID_OPT;
            Console.WriteLine(HELP_SECTION_GREETING);
            do
            {
                writeMenu();
                opt = MU.promptUser();
                processMenuInput(opt);
            } while (!MU.isChoiceMenuExit(opt));
            return opt;
        }

        private void writeMenu()
        {
            TU.writeListAsNumberMenu(mainTopics.ToList());
            MU.printExitChoice();
        }

        private void processMenuInput(int opt)
        {
            switch(opt)
            {
                case (int) HelpMenuTopics.Overview:
                    TU.writeInfoAndPause(OVERVIEW_INFO);
                    break;
                case (int) HelpMenuTopics.Navigation:
                    TU.writeInfoAndPause(NAV_INFO);
                    break;                    
                case (int) HelpMenuTopics.GeneratedFiles:
                    TU.writeInfoAndPause(GENERATED_FILES_INFO);
                    break;
                case MU.EXIT_CODE:
                    break;
                default:
                    MU.writeInvalidMsg();
                    break;
            }
        }

        private void decideForUser(List<string> choices){}
        private int runRNG(){return 0;}
    }
}